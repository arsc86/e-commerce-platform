spring.application.name=e-commerce-msa-api-bff
server.port=1600
path.webservice.base=api

#Security tokens
security.cipher.key=TOKEN1
security.token.key=TOKEN1
#minutes
security.token.expiration.time=60
security.token.refresh.expiration.time=120
security.token.recovery.password.expiration.time=10

#Security Configurations
security.exception.uri={ '/actuator/**'                        :'GET',\
						 '/api/user/login'                     :'POST',\
						 '/api/user/logout'                    :'GET',\
                         '/api/user'                           :'POST',\
                         '/api/user/refresh-token'             :'GET',\
                         '/api/user/recovery-password'         :'POST',\
                         '/api/user/recovery-password/token/**':'GET',\
                         '/api/user/recovery-password/change'  :'PUT', \
                         '/api/user/validate/email'            :'POST', \
                         '/api/user/validate/email/token/**'   :'GET', \
                         '/api/catalog/category/**'            :'GET', \
                         '/api/catalog/product/**'             :'GET', \
                         '/api/catalog/product/**/characteristic' : 'GET', \
                         '/api/catalog/product/**/price'          : 'GET', \
                         '/api/catalog/product/**/discount'       : 'GET', \
                         '/api/catalog/product/**/inventory'      : 'GET', \
                         '/api/catalog/product/characteristic/**/file/**' : 'GET' \
                       }
                       
application.web.uri=https://localhost:4200
                       
security.cors.origin=${application.web.uri}


#gRPC Client Configuration

#gRPC idle Timeout Configuration ( minutes )
grpc.client.timeout.idle=5
#gRPC deadline after Timeout Configuraxstion ( seconds )
grpc.client.timeout.deadline=30
#gRPC cliente keepalive in secodns
grpc.client.keep.alive=20
#gRPC cliente keepalive tomeout in secodns
grpc.client.timeout.keep.alive=30
#gRPC connection Maps
grpc.client.server.map={'user':'dns:///localhost:9090','catalog':'dns:///localhost:9091' }

#kafka Configuration
kafka.client.topic.map={}

#uploadbyte size in bytes
nfs.multipart.max.upload.byte=10000000

#enable security
security.enable=false

springdoc.swagger-ui.path=/swagger-ui.html

springdoc.api-docs.path=/v3/api-docs

#webapp paths
account.validation.path=${application.web.uri}/auth/verified/account/
recovery.password.path=${application.web.uri}/auth/verified/recovery/password/

# Enable SSL and set the keystore
server.ssl.enabled=true
server.ssl.key-store=file:/Users/arsc/Documents/Proyectos/Microservices/e-commerce-platform/certificate.p12
server.ssl.key-store-password=1234asdf
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=localhost

